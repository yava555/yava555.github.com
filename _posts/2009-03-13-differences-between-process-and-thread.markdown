---
layout: post
title: ! '[转]进程与线程的区别'
wordpress_id: 238
wordpress_url: http://www.hijava.org/?p=238
date: 2009-03-13 12:41:02.000000000 +08:00
---
一个形象的解释：
<blockquote>一个系统运行着很多进程，可以比喻为一条马路上有很多马车
不同的进程可以理解为不同的马车
而同一辆马车可以有很多匹马来拉----这些马就是线程
假设道路的宽度恰好可以通过一辆马车
道路可以认为是临界资源
那么马车成为分配资源的最小单位（进程）
而同一个马车被很多匹马驱动（线程）----即最小的运行单位
每辆马车马匹数&gt;=1
所以马匹数=1的时候进程和线程没有严格界限，只存在一个概念上的区分度
马匹数&gt;1的时候才可以严格区分进程和线程</blockquote>
简而言之,一个程序至少有一个进程,一个进程至少有一个线程.
<span style="color: #0000ff;"> 线程的划分尺度小于进程，使得多线程程序的并发性高。</span>另外，<span style="color: #0000ff;">进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。
</span> 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。
从逻辑角度来看，<span style="color: #0000ff;">多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。
</span> 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.
线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.
一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.

转自：<a href="http://www.cnblogs.com/powersun/archive/2007/08/12/852948.html" target="_blank">http://www.cnblogs.com/powersun/archive/2007/08/12/852948.html</a>
